language core;

extend with
  #universal-types;

generic fn const[X](x : X) -> forall Y. fn(Y) -> X {
  return generic [Y] fn(y : Y) { return x }
}

generic fn ignore[X](x : X) -> forall Y. fn(Y) -> Y {
  return generic [Y] fn(y : Y) { return y }
}

generic fn mkIdentity[X](x : X) -> forall Y. fn(X) -> Y {
  return generic [X] ignore[X](x)[Y]
}

fn main(x : Nat) -> Nat {
  return mkIdentity[Nat](0)(succ(0))
}
